"""

–î–∞–≤–∞–π —è –ø—Ä–æ–≤–µ—Ä—é Google / YouTube / DuckDuckGo / GitHub / RBC / Xvideo / Xvideos2/ Pornhub / var / log / Dyno —Å–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è! 

–ß—Ç–æ –ø–∏—Å–∞—Ç—å:

 .lmg <–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å Google>

 .lmy <–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å YouTube>
 
 .lmd <–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å DuckDuckGo>
 
 .lmw <–ø–æ–∏—Å–∫ –≤ Wikipedia>
 
 .lmgit <–ø–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ GitHub>

 .lmnews <–ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π>

 .lmx <–ø–æ–∏—Å–∫ xvideos>
 
 .lmx2 <–ø–æ–∏—Å–∫ xvideos2>

 .lmp <–ø–æ–∏—Å–∫ pornhub>

 .lmvar <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è heroku –Ω–∞—Å—Ç—Ä–æ–π–∫–∏>

 .lmlog <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è heroku –ª–æ–≥–∏>

 .dyno <—Ç–∏–ø –±–∏–ª–ª–∏–Ω–≥–∞>
 



"""







from telethon import events



import os



import requests



import json



from uniborg.util import admin_cmd











@borg.on(admin_cmd(pattern="lmg (.*)"))



async def _(event):



    if event.fwd_from:



        return



    input_str = event.pattern_match.group(1)



    sample_url = "https://da.gd/s?url=http://google.com/search?q={}".format(input_str.replace(" ","+"))



    response_api = requests.get(sample_url).text



    if response_api:



        await event.edit("–Ø –ø—Ä–æ–≤–µ—Ä—é **Google** —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:\nüëâ [{}]({})\n`–õ–æ–≤–∏ —Å—Å—ã–ª–∫—É, –Ω–µ –∑–∞–±—É–¥—å —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ! üòâ` ".format(input_str,response_api.rstrip()))



    else:



        await event.edit("–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")





@borg.on(admin_cmd(pattern="lmy (.*)"))



async def _(event):



    if event.fwd_from:



        return



    input_str = event.pattern_match.group(1)



    sample_url = "https://da.gd/s?url=https://www.youtube.com/results?search_query={}".format(input_str.replace(" ","+"))



    response_api = requests.get(sample_url).text



    if response_api:



        await event.edit("–Ø –ø—Ä–æ–≤–µ—Ä—é **YouTube** —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:\nüëâ [{}]({})\n`–õ–æ–≤–∏ —Å—Å—ã–ª–∫—É, –Ω–µ –∑–∞–±—É–¥—å —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ! üòâ` ".format(input_str,response_api.rstrip()))

#–ù—É –≤–æ—Ç —á—Ç–æ —Ç—ã —Ç—É—Ç –∑–∞–±—ã–ª?

    else:



        await event.edit("–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")




@borg.on(admin_cmd(pattern="lmd (.*)"))



async def _(event):



    if event.fwd_from:



        return



    input_str = event.pattern_match.group(1)



    sample_url = "https://da.gd/s?url=https://duckduckgo.com/?q={}&t=h_&ia=about".format(input_str.replace(" ","+"))



    response_api = requests.get(sample_url).text



    if response_api:



        await event.edit("–Ø –ø—Ä–æ–≤–µ—Ä—é **DuckDuckGo** —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:\nüëâ [{}]({})\n`–õ–æ–≤–∏ —Å—Å—ã–ª–∫—É, –Ω–µ –∑–∞–±—É–¥—å —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ! üòâ` ".format(input_str,response_api.rstrip()))



    else:



        await event.edit("–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")




@borg.on(admin_cmd(pattern="lmx (.*)"))



async def _(event):



    if event.fwd_from:



        return



    input_str = event.pattern_match.group(1)



    sample_url = "https://da.gd/s?url=https://www.xvideos.com/?k={}".format(input_str.replace(" ","+"))



    response_api = requests.get(sample_url).text



    if response_api:



        await event.edit("–Ø –ø—Ä–æ–≤–µ—Ä—é **xvideo** —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:\nüëâ [{}]({})\n`–ù–µ –Ω–∞—Ç—Ä–∏ –º–æ–∑–æ–ª–∏, –∏ –Ω–µ –∑–∞–±—É–¥—å —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ! üòâ` ".format(input_str,response_api.rstrip()))



    else:



        await event.edit("–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")




@borg.on(admin_cmd(pattern="lmp (.*)"))



async def _(event):



    if event.fwd_from:



        return



    input_str = event.pattern_match.group(1)



    sample_url = "https://da.gd/s?url=https://www.pornhub.com/video/search?search={}".format(input_str.replace(" ","+"))



    response_api = requests.get(sample_url).text



    if response_api:



        await event.edit("–Ø –ø—Ä–æ–≤–µ—Ä—é **pornhub** —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:\nüëâ [{}]({})\n`–ú–æ–π —Å–æ–≤–µ—Ç - –Ω–∞–π–¥–∏ —Å–µ–±–µ –¥–µ–≤—É—à–∫—É/–ø–∞—Ä–Ω—è, –∏ –Ω–µ –∑–∞–±—É–¥—å —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ! üòâ` ".format(input_str,response_api.rstrip()))



    else:



        await event.edit("–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@borg.on(admin_cmd(pattern="lmnews (.*)"))



async def _(event):



    if event.fwd_from:



        return



    input_str = event.pattern_match.group(1)



    sample_url = "https://da.gd/s?url=https://www.rbc.ua/rus/search?search_text={}".format(input_str.replace(" ","+"))



    response_api = requests.get(sample_url).text



    if response_api:



        await event.edit("–Ø –ø—Ä–æ–≤–µ—Ä—é **rbc** —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:\nüëâ [{}]({})\n`–õ–æ–≤–∏ —Å—Å—ã–ª–∫—É, –Ω–µ –∑–∞–±—É–¥—å —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ! üòâ` ".format(input_str,response_api.rstrip()))



    else:



        await event.edit("–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")



@borg.on(admin_cmd(pattern="lmvar (.*)"))



async def _(event):



    if event.fwd_from:



        return



    input_str = event.pattern_match.group(1)



    sample_url = "https://da.gd/s?url=https://dashboard.heroku.com/apps/{}/settings".format(input_str.replace(" ","+"))



    response_api = requests.get(sample_url).text



    if response_api:



        await event.edit("–Ø –ø—Ä–æ–≤–µ—Ä—é **var** —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:\nüëâ [{}]({})\n`–õ–æ–≤–∏ —Å—Å—ã–ª–∫—É, –Ω–µ –∑–∞–±—É–¥—å —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ! üòâ` ".format(input_str,response_api.rstrip()))



    else:



        await event.edit("–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")



@borg.on(admin_cmd(pattern="lmlog (.*)"))



async def _(event):



    if event.fwd_from:



        return



    input_str = event.pattern_match.group(1)



    sample_url = "https://da.gd/s?url=https://dashboard.heroku.com/apps/{}/logs".format(input_str.replace(" ","+"))



    response_api = requests.get(sample_url).text



    if response_api:



        await event.edit("–Ø –ø—Ä–æ–≤–µ—Ä—é **log** —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:\nüëâ [{}]({})\n`–õ–æ–≤–∏ —Å—Å—ã–ª–∫—É, –Ω–µ –∑–∞–±—É–¥—å —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ! üòâ` ".format(input_str,response_api.rstrip()))



    else:



        await event.edit("–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

        
        
@borg.on(admin_cmd(pattern="lmx2 (.*)"))



async def _(event):



    if event.fwd_from:



        return



    input_str = event.pattern_match.group(1)



    sample_url = "https://da.gd/s?url=https://www.xvideos2.com/?k={}".format(input_str.replace(" ","+"))



    response_api = requests.get(sample_url).text



    if response_api:



        await event.edit("–Ø –ø—Ä–æ–≤–µ—Ä—é **xvideos2** —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:\nüëâ [{}]({})\n`–•–æ—Ä–æ—à–µ–≥–æ –≤—Ä–µ–º—è–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è, –Ω–µ –∑–∞–±—É–¥—å —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ! üòâ` ".format(input_str,response_api.rstrip()))



    else:



        await event.edit("–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        
      


@borg.on(admin_cmd(pattern="dyno(.*)"))



async def _(event):



    if event.fwd_from:



        return



    input_str = event.pattern_match.group(1)



    sample_url = "https://da.gd/s?url=https://dashboard.heroku.com/account/{}".format(input_str.replace(" ","+"))



    response_api = requests.get(sample_url).text



    if response_api:



        await event.edit("–Ø –ø—Ä–æ–≤–µ—Ä—é **Dyno** —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:\nüëâ [{}]({})\n`–õ–æ–≤–∏ —Å—Å—ã–ª–∫—É, –Ω–µ –∑–∞–±—É–¥—å —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ! üòâ` ".format(input_str,response_api.rstrip()))



    else:



        await event.edit("–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
      
@borg.on(admin_cmd(pattern="lmgit(.*)"))



async def _(event):



    if event.fwd_from:



        return



    input_str = event.pattern_match.group(1)



    sample_url = "https://da.gd/s?url=https://github.com/search?q={}".format(input_str.replace(" ","+"))



    response_api = requests.get(sample_url).text



    if response_api:



        await event.edit("–Ø –ø—Ä–æ–≤–µ—Ä—é **GitHub** —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:\nüëâ [{}]({})\n`–õ–æ–≤–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –Ω–µ –∑–∞–±—É–¥—å —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ! üòâ` ".format(input_str,response_api.rstrip()))



    else:



        await event.edit("–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@borg.on(admin_cmd(pattern="lmw(.*)"))



async def _(event):



    if event.fwd_from:



        return



    input_str = event.pattern_match.group(1)



    sample_url = "https://da.gd/s?url=https://ru.wikipedia.org/wiki/{}".format(input_str.replace(" ","_"))



    response_api = requests.get(sample_url).text



    if response_api:



        await event.edit("–Ø –ø—Ä–æ–≤–µ—Ä—é **Wikipedia** —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:\nüëâ [{}]({})\n`–ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ —Ä–µ—à–∏–ª —É–∑–Ω–∞—Ç—å –Ω–æ–≤–æ–µ, –Ω–µ –∑–∞–±—É–¥—å —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ! üòâ` ".format(input_str,response_api.rstrip()))



    else:



        await event.edit("–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
